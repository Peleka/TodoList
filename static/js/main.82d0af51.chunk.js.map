{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","utils/error-utils.ts","features/Login/login-reducer.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","taskTitle","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","error","setAppStatusAC","status","handleServerNetworkError","message","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedInAC","state","action","payload","value","loginReducer","reducer","actions","isInitialized","setAppInitializedAC","appReducer","addTodolistAC","unshift","todolist","filter","entityStatus","removeTodolistAC","index","findIndex","tl","splice","changeTodolistTitleAC","changeTodolistFilterAC","changeTodolistEntityStatusAC","setTodolistsAC","todolists","map","todolistsReducer","fetchTasks","createAsyncThunk","thunkAPI","res","tasks","items","removeTaskTC","param","removeTaskAC","t","addTaskAC","task","todoListId","updateTaskAC","extraReducers","builder","addCase","forEach","fulfilled","tasksReducer","updateTaskTC","domainModel","getState","find","apiModel","deadline","description","priority","startDate","resultCode","catch","console","warn","AddItemForm","React","memo","addItem","disabled","useState","setTitle","setError","addItemHandler","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","key","className","Checkbox","Delete","Todolist","demo","useDispatch","useEffect","thunk","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","removeTodolist","style","paddingTop","Button","TodolistsList","useSelector","auth","item","addTaskTC","changeStatus","newTitle","changeTodolistTitleTC","addTodolist","addTodolistTC","Grid","container","padding","spacing","allTodolistTasks","Paper","to","Alert","elevation","ErrorSnackbar","app","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","validate","values","email","password","initialValues","rememberMe","onSubmit","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","errors","type","FormControlLabel","control","App","isInitialised","logoutHandler","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","CircularProgress","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","window","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.82d0af51.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '9c832af0-5e6b-4bff-a294-4118cc9c6256'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitle: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, {title: taskTitle});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<ResponseType<{ userId?: number }>>(`auth/login`, data);\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType<{ userId?: number }>>(`auth/login`);\r\n    }\r\n    ,\r\n    me() {\r\n        return instance.get<ResponseType<{ id: number, email: string, login: string }>>(`auth/me`)\r\n    }\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../app/app-reducer'\r\nimport {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC({error: data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppErrorAC({error: 'Some error occurred'}))\r\n    }\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppErrorAC(error.message ? {error: error.message} : {error: 'Some error occurred'}))\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n","import {Dispatch} from 'redux'\r\nimport {setAppStatusAC} from '../../app/app-reducer'\r\nimport {authAPI, LoginParamsType} from \"../../api/todolists-api\";\r\nimport {handleServerAppError} from \"../../utils/error-utils\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: \"login\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        setIsLoggedInAC(state, action: PayloadAction<{ value: boolean }>) {\r\n            state.isLoggedIn = action.payload.value\r\n        }\r\n    }\r\n})\r\n\r\nexport const loginReducer = slice.reducer\r\nexport const {setIsLoggedInAC} = slice.actions  //const setIsLoggedInAC = slice.actions.setIsLoggedInAC\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    authAPI.login(data)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({value: true}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerAppError(error, dispatch);\r\n        })\r\n}\r\n\r\nexport const logOutTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    authAPI.logout()\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                debugger\r\n                dispatch(setIsLoggedInAC({value: false}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                // dispatch(clearTodosDataAC())\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerAppError(error, dispatch);\r\n        })\r\n}","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/todolists-api\";\r\nimport {setIsLoggedInAC} from \"../features/Login/login-reducer\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\ntype InitialStateType = {\r\n    status: RequestStatusType,\r\n    error: null | string,\r\n    isInitialized: boolean\r\n}\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\nconst slice = createSlice({\r\n    name: 'app',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setAppInitializedAC(state, action: PayloadAction<{ value: boolean }>) {\r\n            state.isInitialized = action.payload.value\r\n        },\r\n        setAppErrorAC(state, action: PayloadAction<{ error: string | null }>) {\r\n            state.error = action.payload.error\r\n        },\r\n        setAppStatusAC(state, action: PayloadAction<{ status: RequestStatusType }>) {\r\n            state.status = action.payload.status\r\n        }\r\n    }\r\n})\r\n\r\n\r\nexport const appReducer = slice.reducer\r\nexport const {setAppInitializedAC , setAppStatusAC, setAppErrorAC} = slice.actions\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport const initializedAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me()\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({value: true}))\r\n            } else {\r\n            }\r\n            dispatch(setAppInitializedAC({value: true}))\r\n        })\r\n}\r\n\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\n","import {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {RequestStatusType, setAppStatusAC} from \"../../app/app-reducer\";\r\nimport {todolistsAPI, TodolistType} from \"../../api/todolists-api\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nconst slice = createSlice({\r\n    name: 'todolists',\r\n    initialState: initialState,\r\n    reducers: {\r\n        addTodolistAC(state, action: PayloadAction<{ todolist: TodolistType }>) {\r\n            state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\r\n\r\n        },\r\n        removeTodolistAC(state, action: PayloadAction<{ id: string }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            if (index > -1) {\r\n                state.splice(index, 1)\r\n            }\r\n        },\r\n        changeTodolistTitleAC(state, action: PayloadAction<{ id: string, title: string }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].title = action.payload.title\r\n        },\r\n        changeTodolistFilterAC(state, action: PayloadAction<{ id: string, filter: FilterValuesType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].filter = action.payload.filter\r\n        },\r\n        changeTodolistEntityStatusAC(state, action: PayloadAction<{ id: string, status: RequestStatusType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].entityStatus = action.payload.status\r\n        },\r\n        setTodolistsAC(state, action: PayloadAction<{ todolists: Array<TodolistType> }>) {\r\n            return action.payload.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        }\r\n    }\r\n})\r\n\r\nexport const {\r\n    removeTodolistAC,\r\n    addTodolistAC,\r\n    changeTodolistTitleAC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistEntityStatusAC,\r\n    setTodolistsAC\r\n} = slice.actions\r\nexport const todolistsReducer = slice.reducer\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC({todolists: res.data}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n        dispatch(changeTodolistEntityStatusAC({id: todolistId, status: 'loading'}))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then(() => {\r\n                dispatch(removeTodolistAC({id: todolistId}))\r\n                //скажем глобально приложению, что асинхронная операция завершена\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC({todolist: res.data.data.item}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then(() => {\r\n                dispatch(changeTodolistTitleAC({id: id, title: title}))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}","import {addTodolistAC, removeTodolistAC, setTodolistsAC} from \"./todolists-reducer\";\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from \"../../api/todolists-api\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {setAppStatusAC} from \"../../app/app-reducer\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const fetchTasks = createAsyncThunk('tasks/fetchTasks', (todolistId: string, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    return todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return {tasks, todolistId};\r\n        })\r\n})\r\nexport const removeTaskTC = createAsyncThunk('tasks/removeTasks', (param: {taskId: string, todolistId: string}, thunkAPI) => {\r\n    return todolistsAPI.deleteTask(param.todolistId, param.taskId)\r\n        .then(() => {\r\n            const action = removeTaskAC({taskId: param.taskId, todolistId: param.todolistId})\r\n            thunkAPI.dispatch(action)\r\n        })\r\n})\r\n\r\nconst slice = createSlice({\r\n    name: 'tasks',\r\n    initialState: initialState,\r\n    reducers: {\r\n        removeTaskAC(state, action: PayloadAction<{ taskId: string, todolistId: string }>) {\r\n            const tasks = state[action.payload.todolistId];\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId);\r\n            if (index > -1) {\r\n                tasks.splice(index, 1);\r\n            }\r\n        },\r\n        addTaskAC(state, action: PayloadAction<{ task: TaskType }>) {\r\n            state[action.payload.task.todoListId].unshift(action.payload.task)\r\n        },\r\n        updateTaskAC(state, action: PayloadAction<{ taskId: string, model: UpdateDomainTaskModelType, todolistId: string }>) {\r\n            const tasks = state[action.payload.todolistId];\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId);\r\n            if (index > -1) {\r\n                tasks[index] = {...tasks[index], ...action.payload.model}\r\n            }\r\n        }\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(addTodolistAC, (state, action) => {\r\n            state[action.payload.todolist.id] = [];\r\n        });\r\n        builder.addCase(removeTodolistAC, (state, action) => {\r\n            delete state[action.payload.id];\r\n        });\r\n        builder.addCase(setTodolistsAC, (state, action) => {\r\n            action.payload.todolists.forEach((tl: any) => {\r\n                state[tl.id] = [];\r\n            })\r\n        });\r\n        builder.addCase(fetchTasks.fulfilled, (state, action) => {\r\n            // @ts-ignore\r\n            state[action.payload.todolistId] = action.payload.tasks\r\n        })\r\n    }\r\n})\r\n\r\nexport const {removeTaskAC, addTaskAC, updateTaskAC} = slice.actions\r\nexport const tasksReducer = slice.reducer\r\n\r\n// thunks\r\n\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC({task: task})\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC({taskId: taskId, model: domainModel, todolistId: todolistId})\r\n                    dispatch(action)\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function({addItem, disabled = false}: AddItemFormPropsType) {\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {useDispatch} from \"react-redux\";\r\nimport {fetchTasks} from \"../tasks-reducer\";\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasks(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType>(state => state.auth.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return;\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (taskId: string, todolistId: string) {\r\n        const thunk = removeTaskTC({taskId, todolistId})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC({id: todolistId, filter: value})\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n\r\n    if(!isLoggedIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppErrorAC} from '../../app/app-reducer'\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    //const [open, setOpen] = React.useState(true)\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC({error: null}));\r\n    }\r\n\r\n\r\n    const isOpen = error !== null;\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import {Button, Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, Grid, TextField} from '@material-ui/core'\r\nimport React from 'react'\r\nimport {useFormik} from 'formik';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"./login-reducer\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType>(state => state.auth.isLoggedIn)\r\n\r\n    const formik = useFormik({\r\n       validate: values => {\r\n           if(!values.email) {\r\n               return {\r\n                   email: 'Email is required'\r\n               }\r\n           }\r\n           if(!values.password) {\r\n               return {\r\n                   password: 'Password is required'\r\n               }\r\n           }\r\n       },\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        onSubmit: values => {\r\n           dispatch(loginTC(values))\r\n        },\r\n    });\r\n\r\n    if(isLoggedIn) {\r\n        return <Redirect to={\"/\"}/>\r\n    }\r\n\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}>here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"email\")}\r\n                        />\r\n                        {formik.errors.email  ? <div>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"password\")}\r\n                        />\r\n                        {formik.errors.password  ? <div>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps(\"rememberMe\")}\r\n                                checked={formik.values.rememberMe}\r\n                            />}\r\n                        />\r\n                        <Button type=\"submit\" variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n\r\n}","import React, {useCallback, useEffect} from 'react'\r\nimport './App.css'\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from '@material-ui/core'\r\nimport {Menu} from '@material-ui/icons'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from './store'\r\nimport {initializedAppTC, RequestStatusType} from './app-reducer'\r\nimport {BrowserRouter, Route} from \"react-router-dom\";\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {logOutTC} from \"../features/Login/login-reducer\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n///test\r\nfunction App({demo = false}: PropsType) {\r\n\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    const isInitialised = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType>(state => state.auth.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializedAppTC())\r\n    }, [dispatch])\r\n\r\n    const logoutHandler = useCallback(() => {\r\n        dispatch(logOutTC())\r\n\r\n    }, [dispatch])\r\n\r\n    if(!isInitialised) {\r\n        return <div><CircularProgress /></div>\r\n    }\r\n\r\n    return (\r\n        <BrowserRouter>\r\n            <div className=\"App\">\r\n                <ErrorSnackbar/>\r\n                <AppBar position=\"static\">\r\n                    <Toolbar>\r\n                        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                            <Menu/>\r\n                        </IconButton>\r\n                        <Typography variant=\"h6\">\r\n                            News\r\n                        </Typography>\r\n                        {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Log out</Button>}\r\n                    </Toolbar>\r\n                    {status === 'loading' && <LinearProgress/>}\r\n                </AppBar>\r\n                <Container fixed>\r\n                    <Route exact path={\"/\"} render={() => <TodolistsList demo={demo}/>}/>\r\n                    <Route path={\"/login\"} render={() => <Login/>}/>\r\n\r\n                </Container>\r\n            </div>\r\n        </BrowserRouter>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {combineReducers} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from './app-reducer'\r\nimport {loginReducer} from \"../features/Login/login-reducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: loginReducer\r\n})\r\n// непосредственно создаём store\r\n// export const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n//\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunkMiddleware)\r\n})\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './app/App';\nimport {Provider} from 'react-redux';\nimport {store} from './app/store';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}